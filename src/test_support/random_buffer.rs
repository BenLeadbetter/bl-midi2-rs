// use crate::buffer::{Bytes, Ump};
//
// pub trait RandomBuffer<T> {
//     fn random_buffer<const SIZE: usize>() -> [T; SIZE]
//     where
//         [T; SIZE]: core::default::Default;
// }
//
// impl RandomBuffer<u32> for Ump {
//     fn random_buffer<const SIZE: usize>() -> [u32; SIZE]
//     where
//         [u32; SIZE]: core::default::Default,
//     {
//         let mut ret: [u32; SIZE] = Default::default();
//         ret.copy_from_slice(&RANDOM_DATA[..SIZE]);
//         ret
//     }
// }
//
// impl RandomBuffer<u8> for Bytes {
//     fn random_buffer<const SIZE: usize>() -> [u8; SIZE]
//     where
//         [u8; SIZE]: core::default::Default,
//     {
//         let mut ret: [u8; SIZE] = Default::default();
//         ret.copy_from_slice(&RANDOM_BYTES[..SIZE]);
//         ret
//     }
// }
//
// const RANDOM_DATA: [u32; 50] = [
//     0xAE1B38A6, 0x4833C6D0, 0xB3F584D5, 0x5075085D, 0xF7EBA12, 0xDFA67DC6, 0x798B3988, 0xAC461F3D,
//     0x67E4A508, 0x92B9D00C, 0x80743064, 0x7EC4F54B, 0x7AAEFCA8, 0x9040B1B9, 0xC2818D0E, 0xA1E2A4E0,
//     0xA9B80E30, 0x62CEEE59, 0xBE74F48D, 0x277D48D7, 0x10A36971, 0x1A2F4FFB, 0x5EFEBFFE, 0x2952D218,
//     0xBEDFFB8A, 0xECD69AFA, 0xCF51F94C, 0x1CE544F7, 0x3E80B3B3, 0x95B1EEC8, 0xA0789C02, 0xF97B8AB0,
//     0xA6E72FD1, 0xC3773CFB, 0xCDDD9EA6, 0x8119EA08, 0x3A006253, 0x5D07CB53, 0xDEBC503E, 0xAC9C833B,
//     0x388E7843, 0x8C1495BA, 0x1AFE8B04, 0x1B61366A, 0x3A10B330, 0x5BBD9CFE, 0x1A5921F4, 0xFB93D58C,
//     0x20E1D602, 0x8B2BF8E3,
// ];
//
// const RANDOM_BYTES: [u8; 50] = [
//     0x80, 0xA1, 0x10, 0x9E, 0x35, 0x21, 0xE1, 0x77, 0x0, 0x7A, 0x29, 0xAF, 0x3B, 0x27, 0xA3, 0xD1,
//     0x38, 0xBE, 0x84, 0xD5, 0x7C, 0xE, 0x2, 0x18, 0x25, 0x2D, 0x7F, 0xD0, 0xFB, 0xF0, 0xCB, 0x18,
//     0x32, 0xF6, 0xB, 0xFC, 0x23, 0xC8, 0x6C, 0xDB, 0xB9, 0x10, 0xDD, 0xA, 0x20, 0x32, 0x2C, 0xE2,
//     0x3A, 0xEF,
// ];
